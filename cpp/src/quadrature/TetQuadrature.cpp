#include "TetQuadrature.hpp"
#include "LineQuadrature.hpp"

#include <vector>
#include <cassert>
#include <cmath>

namespace poly_fem
{
    namespace
    {
        void get_weight_and_points(const int order, Eigen::MatrixXd &points, Eigen::VectorXd &weights)
        {
            switch(order)
            {
                case 0:
                {
                    points.resize(1, 3);
                    weights.resize(1, 1);

                    points <<
                    0.25, 0.25, 0.25;

                    weights <<
                    1;

                    break;
                }

                case 1:
                {
                    points.resize(4, 3);
                    weights.resize(4, 1);

                    points <<
                    0.5854,    0.1382,    0.1382,
                    0.1382,    0.5854,    0.1382,
                    0.1382,    0.1382,    0.5854,
                    0.1382,    0.1382,    0.1382;

                    weights <<
                    0.25, 0.25, 0.25, 0.25;

                    break;
                }

                case 2:
                {
                    points.resize(8, 3);
                    weights.resize(8, 1);

                    points <<
                    0.0,0.0,0.0,
                    1.0,0.0,0.0,
                    0.0,1.0,0.0,
                    0.0,0.0,1.0,
                    0.333333333333,0.333333333333,0.0,
                    0.333333333333,0.0,0.333333333333,
                    0.0,0.333333333333,0.333333333333,
                    0.333333333333,0.333333333333,0.333333333333;

                    weights <<
                    0.025, 0.025, 0.025, 0.025, 0.225, 0.225, 0.225, 0.225;

                    break;
                }

                case 4:
                {
                    points.resize(15, 3);
                    weights.resize(15, 1);

                    points <<
                    0.250000000000000,   0.250000000000000,   0.250000000000000,
                    0,   0.333333333333333,   0.333333333333333,
                    0.333333333333333,   0.333333333333333,   0.333333333333333,
                    0.333333333333333,   0.333333333333333,                   0,
                    0.333333333333333,                   0,   0.333333333333333,
                    0.727272727272727,   0.090909090909091,   0.090909090909091,
                    0.090909090909091,   0.090909090909091,   0.090909090909091,
                    0.090909090909091,   0.090909090909091,   0.727272727272727,
                    0.090909090909091,   0.727272727272727,   0.090909090909091,
                    0.433449846426336,   0.066550153573664,   0.066550153573664,
                    0.066550153573664,   0.433449846426336,   0.066550153573664,
                    0.066550153573664,   0.066550153573664,   0.433449846426336,
                    0.066550153573664,   0.433449846426336,   0.433449846426336,
                    0.433449846426336,   0.066550153573664,   0.433449846426336,
                    0.433449846426336,   0.433449846426336,   0.066550153573664;

                    weights <<
                    0.181702068582536,
                    0.036160714285716,
                    0.036160714285716,
                    0.036160714285716,
                    0.036160714285716,
                    0.069871494516175,
                    0.069871494516175,
                    0.069871494516175,
                    0.069871494516175,
                    0.065694849368317,
                    0.065694849368317,
                    0.065694849368317,
                    0.065694849368317,
                    0.065694849368317,
                    0.065694849368317;

                    break;
                }

                case 6:
                {
                    points.resize( 24, 3);
                    weights.resize( 24, 1);

                    points <<
                    0.3561913862225449, 0.2146028712591517, 0.2146028712591517,
                    0.2146028712591517, 0.2146028712591517, 0.2146028712591517,
                    0.2146028712591517, 0.2146028712591517, 0.3561913862225449,
                    0.2146028712591517, 0.3561913862225449, 0.2146028712591517,
                    0.8779781243961660, 0.0406739585346113, 0.0406739585346113,
                    0.0406739585346113, 0.0406739585346113, 0.0406739585346113,
                    0.0406739585346113, 0.0406739585346113, 0.8779781243961660,
                    0.0406739585346113, 0.8779781243961660, 0.0406739585346113,
                    0.0329863295731731, 0.3223378901422757, 0.3223378901422757,
                    0.3223378901422757, 0.3223378901422757, 0.3223378901422757,
                    0.3223378901422757, 0.3223378901422757, 0.0329863295731731,
                    0.3223378901422757, 0.0329863295731731, 0.3223378901422757,
                    0.2696723314583159, 0.0636610018750175, 0.0636610018750175,
                    0.0636610018750175, 0.2696723314583159, 0.0636610018750175,
                    0.0636610018750175, 0.0636610018750175, 0.2696723314583159,
                    0.6030056647916491, 0.0636610018750175, 0.0636610018750175,
                    0.0636610018750175, 0.6030056647916491, 0.0636610018750175,
                    0.0636610018750175, 0.0636610018750175, 0.6030056647916491,
                    0.0636610018750175, 0.2696723314583159, 0.6030056647916491,
                    0.2696723314583159, 0.6030056647916491, 0.0636610018750175,
                    0.6030056647916491, 0.0636610018750175, 0.2696723314583159,
                    0.0636610018750175, 0.6030056647916491, 0.2696723314583159,
                    0.2696723314583159, 0.0636610018750175, 0.6030056647916491,
                    0.6030056647916491, 0.2696723314583159, 0.0636610018750175;

                    weights <<
                    0.0399227502581679,
                    0.0399227502581679,
                    0.0399227502581679,
                    0.0399227502581679,
                    0.0100772110553207,
                    0.0100772110553207,
                    0.0100772110553207,
                    0.0100772110553207,
                    0.0553571815436544,
                    0.0553571815436544,
                    0.0553571815436544,
                    0.0553571815436544,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857,
                    0.0482142857142857;

                    break;
                }

                case 8:
                {

                    points.resize( 45, 3);
                    weights.resize( 45, 1);

                    points <<
                    0.2500000000000000, 0.2500000000000000, 0.2500000000000000,
                    0.6175871903000830, 0.1274709365666390, 0.1274709365666390,
                    0.1274709365666390, 0.1274709365666390, 0.1274709365666390,
                    0.1274709365666390, 0.1274709365666390, 0.6175871903000830,
                    0.1274709365666390, 0.6175871903000830, 0.1274709365666390,
                    0.9037635088221031, 0.0320788303926323, 0.0320788303926323,
                    0.0320788303926323, 0.0320788303926323, 0.0320788303926323,
                    0.0320788303926323, 0.0320788303926323, 0.9037635088221031,
                    0.0320788303926323, 0.9037635088221031, 0.0320788303926323,
                    0.4502229043567190, 0.0497770956432810, 0.0497770956432810,
                    0.0497770956432810, 0.4502229043567190, 0.0497770956432810,
                    0.0497770956432810, 0.0497770956432810, 0.4502229043567190,
                    0.0497770956432810, 0.4502229043567190, 0.4502229043567190,
                    0.4502229043567190, 0.0497770956432810, 0.4502229043567190,
                    0.4502229043567190, 0.4502229043567190, 0.0497770956432810,
                    0.3162695526014501, 0.1837304473985499, 0.1837304473985499,
                    0.1837304473985499, 0.3162695526014501, 0.1837304473985499,
                    0.1837304473985499, 0.1837304473985499, 0.3162695526014501,
                    0.1837304473985499, 0.3162695526014501, 0.3162695526014501,
                    0.3162695526014501, 0.1837304473985499, 0.3162695526014501,
                    0.3162695526014501, 0.3162695526014501, 0.1837304473985499,
                    0.0229177878448171, 0.2319010893971509, 0.2319010893971509,
                    0.2319010893971509, 0.0229177878448171, 0.2319010893971509,
                    0.2319010893971509, 0.2319010893971509, 0.0229177878448171,
                    0.5132800333608811, 0.2319010893971509, 0.2319010893971509,
                    0.2319010893971509, 0.5132800333608811, 0.2319010893971509,
                    0.2319010893971509, 0.2319010893971509, 0.5132800333608811,
                    0.2319010893971509, 0.0229177878448171, 0.5132800333608811,
                    0.0229177878448171, 0.5132800333608811, 0.2319010893971509,
                    0.5132800333608811, 0.2319010893971509, 0.0229177878448171,
                    0.2319010893971509, 0.5132800333608811, 0.0229177878448171,
                    0.0229177878448171, 0.2319010893971509, 0.5132800333608811,
                    0.5132800333608811, 0.0229177878448171, 0.2319010893971509,
                    0.7303134278075384, 0.0379700484718286, 0.0379700484718286,
                    0.0379700484718286, 0.7303134278075384, 0.0379700484718286,
                    0.0379700484718286, 0.0379700484718286, 0.7303134278075384,
                    0.1937464752488044, 0.0379700484718286, 0.0379700484718286,
                    0.0379700484718286, 0.1937464752488044, 0.0379700484718286,
                    0.0379700484718286, 0.0379700484718286, 0.1937464752488044,
                    0.0379700484718286, 0.7303134278075384, 0.1937464752488044,
                    0.7303134278075384, 0.1937464752488044, 0.0379700484718286,
                    0.1937464752488044, 0.0379700484718286, 0.7303134278075384,
                    0.0379700484718286, 0.1937464752488044, 0.7303134278075384,
                    0.7303134278075384, 0.0379700484718286, 0.1937464752488044,
                    0.1937464752488044, 0.7303134278075384, 0.0379700484718286;

                    weights <<
                    -0.2359620398477559,
                    0.0244878963560563,
                    0.0244878963560563,
                    0.0244878963560563,
                    0.0244878963560563,
                    0.0039485206398261,
                    0.0039485206398261,
                    0.0039485206398261,
                    0.0039485206398261,
                    0.0263055529507371,
                    0.0263055529507371,
                    0.0263055529507371,
                    0.0263055529507371,
                    0.0263055529507371,
                    0.0263055529507371,
                    0.0829803830550590,
                    0.0829803830550590,
                    0.0829803830550590,
                    0.0829803830550590,
                    0.0829803830550590,
                    0.0829803830550590,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0254426245481024,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852,
                    0.0134324384376852;

                    break;
                }

                default:
                assert(false);
            };
        }
    }

    TetQuadrature::TetQuadrature()
    { }

    void TetQuadrature::get_quadrature(const int order, Quadrature &quad)
    {
        Quadrature tmp;

        get_weight_and_points(order, quad.points, quad.weights);

        assert(fabs(quad.weights.sum()-1)<1e-14);
        assert(quad.points.minCoeff()>=0 && quad.points.maxCoeff()<=1);

        assert(quad.points.rows()==quad.weights.size());

        quad.weights/=6;
    }
}
